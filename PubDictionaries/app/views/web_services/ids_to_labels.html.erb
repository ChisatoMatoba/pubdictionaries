<div class="annotation_page">
<div class="code_sample">
<pre>

#!/usr/bin/env ruby

require 'json'
require 'rest_client'


# Get the list of labels for each ID.
#
# * (string)  url       - The URL of an annotator.
# * (string)  email     - User's login ID.
# * (string)  password  - User's login password.
# * (array)   ids       - An array of IDs for mapping.
#
def get_label_list(url, email, password, ids)
  # 1. Initialize the options hash.
  options = {
    :headers => {
      :content_type => :json,
      :accept       => :json,
    },
    :user         => email,
    :password     => password, 
    :timeout      => 9999, 
    :open_timeout => 9999,
  }

  # 2. Create a rest client resource.
  resource = RestClient::Resource.new  url, options

  # 3. Retrieve the list of labels.
  data = resource.post(:ids => ids.to_json) do |response, request, result|
    case response.code
    when 200
      JSON.parse(response.body)
    else
      $stdout.puts "Error code: #{response.code}"
    end
  end

  return data
end


# Test code.
#
# * ARGV[0]  -  User's email.
# * ARGV[1]  -  User's password.
# * ARGV[2]  -  Annotator URL including a REST-API URL & dictionaries.
#
if __FILE__ == $0
  if ARGV.size != 3
    $stdout.puts "Usage:  #{$0}  Email  Password  URL"
    exit
  end

  # 1. Prepare data.
  email      = ARGV[0]
  password   = ARGV[1]
  url        = ARGV[2]
  sample_ids = [ "1", "3", "5", "100008564", "100009600", "new_id", "new_id_2"]

  # 2. Retrive label lists for each ID.
  results = get_label_list(url, email, password, sample_ids)

  # 3. Show the mapping results.
  $stdout.puts "Output:"
  $stdout.puts "    %-20s| %-20s" % ["ID", "Labels"]
  results.each_pair do |id, labels|
    $stdout.puts "    %-20s| %-20s" % [id, labels.join(", ")]
  end

end

</pre>
</div>
</div>


